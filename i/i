#!/usr/bin/python
import json
import sys
from terminaltables import AsciiTable
import os

storage_file = os.path.expanduser("~") + "/.i"

# Create the storage file if it doesn't exist
if not os.path.isfile(storage_file):
    open(storage_file, "w")

# Get data out of the storage file
with open(storage_file, 'r') as file:
    try:
        server_list = json.load(file)
    except ValueError:
        server_list = {}


def print_server_table(servers):
    table_data = [
        ["Name", "Address", "Location"]
    ]
    for server in servers:
        table_data.append([
            server['name'],
            server['username'] + "@" + server['ip'],
            server['location']
        ])

    table = AsciiTable(table_data)
    print(table.table)


def parse_add_args():
    args = {}

    if len(sys.argv) < 3:
        return None

    if not "@" in sys.argv[3]:
        return None

    if isinstance(sys.argv[2], str):
        args['name'] = sys.argv[2]

    if isinstance(sys.argv[3], str):
        args['username'] = sys.argv[3].split("@")[0]
        args['ip'] = sys.argv[3].split("@")[1]

    if "-l" in sys.argv:
        args['location'] = sys.argv[sys.argv.index("-l") + 1]
    else:
        args['location'] = ""

    return args


def ask_for_args():
    args = {}
    print("Enter a memorable name: "),
    args['name'] = raw_input()
    print("Enter the username you will use to sign in: "),
    args['username'] = raw_input()
    print("Enter the ip of this server: "),
    args['ip'] = raw_input()
    print("Enter a location tag for this server (none): "),
    args['location'] = raw_input()
    return args


def add_server(server_list):
    server = parse_add_args()
    if not server:
        server = ask_for_args()

    server_list.append(server)


def connect():
    print(sys.argv)
    if len(sys.argv) == 3:
        name = sys.argv[2]
    else:
        print("Name of server to connect to: "),
        name = raw_input()

    for entry in server_list:
        if entry["name"] == name:
            server = entry

    # print("ssh %s@%s" % (server['username'], server['ip']))
    os.system("ssh %s@%s" % (server['username'], server['ip']))


def clear_servers(server_list):
    server_list = {}


def parse_args_for_removal(server_list):
    if len(sys.argv) == 3:
        name = sys.argv[2]
    else:
        print("Name of server to remove: "),
        name = raw_input()
    for server in server_list:
        if server["name"] == name:
            return server


def remove_server(server_list):
    server = parse_args_for_removal(server_list)
    server_list[:] = [d for d in server_list if d.get(
        'name') != server['name']]


def help_page():
    page = """
    <-- i -->

    Connect to servers easily

    Commands:
        +------------------------------------------+-----------------------------------------+
        | Command                                  | Description                             |
        +------------------------------------------+-----------------------------------------+
        | list                                     | Display a table with all stored servers |
        | add <name> <username>@<ip> -l <location> | Add a new server. Location is optional  |
        |                                          |    (If your server name has spaces,     |
        |                                          |    surround it in quotes (""))          |
        | remove <name>                            | Remove a server                         |
        | connect <name>                           | Connect to a server (SSH)               |
        | clear                                    | Clear all servers (caution)             |
        | help                                     | Display this page                       |
        +------------------------------------------+-----------------------------------------+

    All information is stored in ~/.i (json)
    """
    return page

if len(sys.argv) == 1:
    print(help_page())

if len(sys.argv) > 1:
    if sys.argv[1] == "list":
        print_server_table(server_list)
    elif sys.argv[1] == "add":
        add_server(server_list)
    elif sys.argv[1] == "connect":
        connect()
    elif sys.argv[1] == "clear":
        clear_servers(server_list)
    elif sys.argv[1] == "remove":
        remove_server(server_list)
    elif sys.argv[1] == "help":
        print(help_page())


# Write new server_list to file
with open(storage_file, 'w') as file:
    file.truncate()
    json.dump(server_list, file, indent=True)
